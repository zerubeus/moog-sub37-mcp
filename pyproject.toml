[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.build.targets.wheel]
only-include = ["/README.md"]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "/Makefile", "/tests"]

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[project]
name = "moog-sub37-mcp"
dynamic = ["version"]
description = "MPC to control Moog Sub37 Monophonic Synthesizer"
authors = [{ name = "zerubeus", email = "zerubeus@gmail.com" }]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Internet",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"

[project.urls]
"Homepage" = "https://github.com/zerubeus/moog-sub37-mcp"
"Bug Tracker" = "https://github.com/zerubeus/moog-sub37-mcp/issues"

[project.scripts]
moog-sub37-mcp = "moog_sub37_mcp.main:main"

dependencies = [
    "pydantic>=2.10.6",
    "mido>=1.3.1",
    "python-rtmidi>=1.5.7",
    "mcp[cli]>=1.5.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "colorlog>=6.9.0",
    "inline-snapshot>=0.20.9",
    "pytest>=8.3.5",
    "mypy>=1.11.2",
    "pyright>=1.1.390",
    "ruff>=0.6.9",
]

[tool.ruff]
line-length = 120
target-version = "py39"
include = ["moog_sub37_mcp/**/*.py", "tests/**/*.py"]

[tool.ruff.lint]
extend-select = [
    "Q",        # Enforces consistent use of quotes (flake8-quotes)
    "RUF100",   # Checks for unused imports (ruff)
    "RUF018",   # Checks for assignments in assert statements, which might not execute in optimized runtimes (ruff) - https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "C90",      # Checks cyclomatic complexity to ensure code isn't too complex (mccabe)
    "UP",       # Suggests upgrades to newer Python syntax or features (pyupgrade)
    "I",        # Enforces sorting and organization of import statements (isort)
    "D",        # Enforces conventions for docstrings (pydocstyle)
    "TID251",   # Bans certain types of relative imports for consistent import style (flake8-tidy-imports)
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true, known-first-party = ["moog_sub37_mcp"] } # Sort imports
mccabe = { max-complexity = 15 } # Check McCabe complexity
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"moog_sub37_mcp/**/*.py" = ["D", "TID251"]
"tests/**/*.py" = ["D"]

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
include = [
    "moog_sub37_mcp",
    "tests",
]
venvPath = ".venv"
# see https://github.com/microsoft/pyright/issues/7771 - we don't want to error on decorated functions in tests
# which are not otherwise used
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false, reportPrivateImportUsage = false },
]

[tool.pytest.ini_options]
testpaths = "tests"
xfail_strict = true
filterwarnings = [
    "error",
]
